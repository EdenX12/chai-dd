<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.mrbird.febs.api.mapper.SUserTaskMapper">

    <select id="findUserTaskingDetail" resultType="java.util.Map" >
          SELECT
          SUTL1.product_id     productId,     -- 商品ID
          SUTL1.totalTaskLine  taskingCnt,    -- 进行中任务线数量
          SUTL2.totalTaskLine  totalTaskCnt,  -- 总任务线数量
          SUTL1.newestTime  newestTime        -- 该用户最新下单的时间
          FROM
         (SELECT
                  product_id,
                  count(*) totalTaskLine,max(create_time) newestTime
           FROM s_user_task_line
           WHERE user_id = #{userId}
            AND pay_status = 1
            AND status = 0
            GROUP BY  product_id) SUTL1
        LEFT JOIN (SELECT  product_id, count(*) totalTaskLine FROM s_user_task_line where  user_id=#{userId}  GROUP BY  product_id) SUTL2
        ON  SUTL2.product_id = SUTL1.product_id
    </select>
    <select id="findUserTaskOutDetail" resultType="java.util.Map" parameterType="sUserTask">

        SELECT

        o.id taskOrderId,
        o.task_number taskNumber,
        o.create_time createTime,
        o.price_type priceType,
        o.order_price orderPrice,
        o.end_time endTime,
        o.status,

        t.id taskId,
        t.user_id userId,
        t.product_id productId,

        t.pay_time payTime,
        datediff(now(), t.pay_time) taskDays,

        p.product_name productName,
        p.product_img productImg,
        p.product_des productDes,
        p.product_detail productDetail,
        p.task_number totalTaskNumber,
        t2.taskNumberOK taskNumberOK,
        p.product_price productPrice,
        p.total_reward totalReward,
        p.task_price taskPrice,
        p.price_unit priceUnit,
        p.success_reward successReward,
        p.every_reward everyReward,

        ifnull(op.offerCount, 0) offerCount,

        frontOffer.amount frontAmount,
        frontOffer.status frontStatus,
        opu.user_name frontUserName,
        opu.nick_name frontNickName,
        opu.user_phone frontUserPhone,

        ifnull(watchTask.watchCnt, 0) watchCnt,
        ifnull(gotTask.hunterCnt, 0) hunterCnt

        FROM s_task_order o
        LEFT JOIN s_user_task t ON t.id = o.task_id AND t.pay_status = 1
        LEFT JOIN s_product p ON p.id = t.product_id
        LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 AND status !=2 GROUP BY product_id) t2
        ON t2.product_id = t.product_id

        LEFT JOIN (SELECT task_order_id, count(*) offerCount FROM s_offer_price WHERE pay_status = 1 GROUP BY task_order_id) op
        ON op.task_order_id = o.id

        LEFT JOIN s_offer_price frontOffer ON frontOffer.task_order_id = o.id AND frontOffer.status IN (1, 3)
        LEFT JOIN s_user opu ON opu.id = frontOffer.user_id

        LEFT JOIN (select product_id, count(*) watchCnt from s_user_task group by product_id) watchTask
        ON watchTask.product_id = t.product_id

        LEFT JOIN (select product_id, count(*) hunterCnt from s_user_task where pay_status =1 group by product_id) gotTask
        ON gotTask.product_id = t.product_id

        WHERE 1=1
        AND o.user_id =#{sUserTask.userId} AND t.user_id = #{sUserTask.userId}

    </select>


    <select id="findUserTaskOfferDetail" resultType="java.util.Map" parameterType="sUserTask">

        SELECT
        sto.create_time createTime,

        t.id taskId,
        t.product_id productId,
        t.task_number taskNumber,

        o.id taskOrderId,
        o.end_time endTime,

        p.product_name productName,
        p.product_img productImg,
        p.product_des productDes,
        p.product_detail productDetail,
        p.task_number totalTaskNumber,
        t2.taskNumberOK taskNumberOK,
        p.product_price productPrice,
        p.total_reward totalReward,
        p.task_price taskPrice,
        p.price_unit priceUnit,
        p.success_reward successReward,
        p.every_reward everyReward,

        oc.offerCount offerCount,

        frontOffer.amount frontAmount,
        frontOffer.status frontStatus,
        opu.user_name frontUserName,
        opu.nick_name frontNickName,
        opu.user_phone frontUserPhone,

        lastOffer.amount amount,
        lastOffer.status lastStatus,

        u.user_name lastUserName,
        u.nick_name lastNickName,
        u.user_phone lastUserPhone
        FROM
        (SELECT o.id, max(op.create_time) create_time
            FROM s_offer_price op
         INNER JOIN s_task_order o ON o.id = op.task_order_id
         WHERE op.user_id = #{sUserTask.userId}
             AND op.pay_status = 1
        group by o.id) sto

        LEFT JOIN s_task_order o ON o.id = sto.id
        LEFT JOIN s_user_task t ON t.id = o.task_id
        LEFT JOIN s_product p ON p.id = t.product_id
        LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 GROUP BY product_id) t2
        ON t2.product_id = p.id
        LEFT JOIN (SELECT task_order_id, count(*) offerCount FROM s_offer_price WHERE pay_status = 1 GROUP BY task_order_id) oc
        ON oc.task_order_id = o.id
        LEFT JOIN s_offer_price frontOffer ON frontOffer.task_order_id = o.id AND frontOffer.status IN (1, 3)
        LEFT JOIN s_user opu ON opu.id = frontOffer.user_id
        LEFT JOIN (select task_order_id, user_id, status, max(amount) amount from s_offer_price where pay_status = 1 and user_id = #{sUserTask.userId} group by task_order_id, user_id) lastOffer
        ON lastOffer.task_order_id = o.id AND frontOffer.status IN (1, 2, 3)
        LEFT JOIN s_user u ON u.id = lastOffer.user_id

    </select>


    <select id="findUserTaskFollowDetail" resultType="java.util.Map" >
        SELECT  DISTINCT follow.product_id
        FROM s_user_follow follow
        where
        follow.status = 1
        AND follow.user_id = #{userId}
        ORDER BY follow.create_time desc
    </select>


    <select id="findUserTaskEndDetail" resultType="java.util.Map" parameterType="sUserTask">

        SELECT
            t.id taskId,
            t.user_id userId,
            t.product_id productId,
            t.task_number taskNumber,
            t.status status,
            t.create_time createTime,
            t.pay_time payTime,
            datediff(now(), t.pay_time) taskDays,
            p.product_name productName,
            p.product_img productImg,
            p.product_des productDes,
            p.product_detail productDetail,
            p.task_number totalTaskNumber,
            t2.taskNumberOK taskNumberOK,
            p.product_price productPrice,
            p.total_reward totalReward,
            p.task_price taskPrice,
            p.price_unit priceUnit,

            ifnull(bonus3.bonus_amount, 0) successReward,
            u.user_name successUserName,
            u.nick_name successNickName,
            u.user_phone successUserPhone,

            ifnull(bonus4.bonus_amount, 0) everyReward,
            ifnull(bonus5.bonus_amount, 0) levelReReward,

            ifnull(watchTask.watchCnt, 0) watchCnt,
            ifnull(gotTask.hunterCnt, 0) hunterCnt

          FROM s_user_task t
        LEFT JOIN s_product p ON p.id = t.product_id
        LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 AND status !=2 GROUP BY product_id) t2
          ON t2.product_id = t.product_id

        LEFT JOIN (select product_id, count(*) watchCnt from s_user_task group by product_id) watchTask
        ON watchTask.product_id = t.product_id

        LEFT JOIN (select product_id, count(*) hunterCnt from s_user_task where pay_status =1 group by product_id) gotTask
        ON gotTask.product_id = t.product_id

        LEFT JOIN s_user_bonus_log bonus3 ON bonus3.task_id = t.id AND bonus3.bonus_type=3
        LEFT JOIN s_user u ON u.id = bonus3.user_id
        LEFT JOIN s_user_bonus_log bonus4 ON bonus4.task_id = t.id AND bonus4.bonus_type=4
        LEFT JOIN s_user_bonus_log bonus5 ON bonus5.task_id = t.id AND bonus5.bonus_type=5
        LEFT JOIN s_user_bonus_log bonus9 ON bonus9.task_id = t.id AND bonus9.bonus_type=9

        WHERE t.pay_status = 1
        AND t.user_id = #{sUserTask.userId}
        AND t.status in (3, 4)

    </select>


</mapper>
