<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.mrbird.febs.api.mapper.SUserTaskMapper">

    <select id="findTaskDetailByStatus" resultType="java.util.Map" >
          SELECT
          SUTL1.status,                       -- 状态（0,3 进行中  4  结算中   -1 5 已完成）
          SUTL1.product_id     productId,     -- 商品ID
          SUTL1.totalTaskLine  taskingCnt,    -- 进行中任务线数量
          SUTL2.totalTaskLine  totalTaskCnt,  -- 总任务线数量
          SUTL1.newestTime      newestTime    -- 该用户最新下单的时间
          FROM
         (SELECT
                  status,
                  product_id,
                  count(*) totalTaskLine,
                  max(create_time) newestTime
           FROM s_user_task_line
           WHERE user_id = #{userId}
            AND pay_status = 1
            GROUP BY  status, product_id) SUTL1
        LEFT JOIN (SELECT  product_id, count(*) totalTaskLine FROM s_user_task_line where  user_id=#{userId} AND pay_status = 1 GROUP BY  product_id) SUTL2
        ON  SUTL2.product_id = SUTL1.product_id
        WHERE 1 = 1
        <choose>
            <when test="status == 0">
                AND status IN (0, 3)
            </when>
            <when test="status == 5">
                AND status IN (-1, 5)
            </when>
            <when test="status == 4">
                AND status = 4
            </when>
        </choose>
    </select>

    <select id="findUserTaskFollowDetail" resultType="java.util.Map" >
        SELECT DISTINCT product_id productId
          FROM s_user_follow
         WHERE status = 1
           AND follow_type = 0
           AND user_id = #{userId}
         ORDER BY create_time desc
    </select>

    <select id="findUserTaskOutDetail" resultType="java.util.Map" parameterType="sUserTask">

        SELECT

        o.id taskOrderId,
        o.task_number taskNumber,
        o.create_time createTime,
        o.price_type priceType,
        o.order_price orderPrice,
        o.end_time endTime,
        o.status,

        t.id taskId,
        t.user_id userId,
        t.product_id productId,

        t.pay_time payTime,
        datediff(now(), t.pay_time) taskDays,

        p.product_name productName,
        p.product_img productImg,
        p.product_des productDes,
        p.product_detail productDetail,
        p.task_number totalTaskNumber,
        t2.taskNumberOK taskNumberOK,
        p.product_price productPrice,
        p.total_reward totalReward,
        p.task_price taskPrice,
        p.price_unit priceUnit,
        p.success_reward successReward,
        p.every_reward everyReward,

        ifnull(op.offerCount, 0) offerCount,

        frontOffer.amount frontAmount,
        frontOffer.status frontStatus,
        opu.user_name frontUserName,
        opu.nick_name frontNickName,
        opu.user_phone frontUserPhone,

        ifnull(watchTask.watchCnt, 0) watchCnt,
        ifnull(gotTask.hunterCnt, 0) hunterCnt

        FROM s_task_order o
        LEFT JOIN s_user_task t ON t.id = o.task_id AND t.pay_status = 1
        LEFT JOIN s_product p ON p.id = t.product_id
        LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 AND status !=2 GROUP BY product_id) t2
        ON t2.product_id = t.product_id

        LEFT JOIN (SELECT task_order_id, count(*) offerCount FROM s_offer_price WHERE pay_status = 1 GROUP BY task_order_id) op
        ON op.task_order_id = o.id

        LEFT JOIN s_offer_price frontOffer ON frontOffer.task_order_id = o.id AND frontOffer.status IN (1, 3)
        LEFT JOIN s_user opu ON opu.id = frontOffer.user_id

        LEFT JOIN (select product_id, count(*) watchCnt from s_user_task group by product_id) watchTask
        ON watchTask.product_id = t.product_id

        LEFT JOIN (select product_id, count(*) hunterCnt from s_user_task where pay_status =1 group by product_id) gotTask
        ON gotTask.product_id = t.product_id

        WHERE 1=1
        AND o.user_id =#{sUserTask.userId} AND t.user_id = #{sUserTask.userId}

    </select>

    <select id="findUserTaskOfferDetail" resultType="java.util.Map" parameterType="sUserTask">

        SELECT
        sto.create_time createTime,

        t.id taskId,
        t.product_id productId,
        t.task_number taskNumber,

        o.id taskOrderId,
        o.end_time endTime,

        p.product_name productName,
        p.product_img productImg,
        p.product_des productDes,
        p.product_detail productDetail,
        p.task_number totalTaskNumber,
        t2.taskNumberOK taskNumberOK,
        p.product_price productPrice,
        p.total_reward totalReward,
        p.task_price taskPrice,
        p.price_unit priceUnit,
        p.success_reward successReward,
        p.every_reward everyReward,

        oc.offerCount offerCount,

        frontOffer.amount frontAmount,
        frontOffer.status frontStatus,
        opu.user_name frontUserName,
        opu.nick_name frontNickName,
        opu.user_phone frontUserPhone,

        lastOffer.amount amount,
        lastOffer.status lastStatus,

        u.user_name lastUserName,
        u.nick_name lastNickName,
        u.user_phone lastUserPhone
        FROM
        (SELECT o.id, max(op.create_time) create_time
            FROM s_offer_price op
         INNER JOIN s_task_order o ON o.id = op.task_order_id
         WHERE op.user_id = #{sUserTask.userId}
             AND op.pay_status = 1
        group by o.id) sto

        LEFT JOIN s_task_order o ON o.id = sto.id
        LEFT JOIN s_user_task t ON t.id = o.task_id
        LEFT JOIN s_product p ON p.id = t.product_id
        LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 GROUP BY product_id) t2
        ON t2.product_id = p.id
        LEFT JOIN (SELECT task_order_id, count(*) offerCount FROM s_offer_price WHERE pay_status = 1 GROUP BY task_order_id) oc
        ON oc.task_order_id = o.id
        LEFT JOIN s_offer_price frontOffer ON frontOffer.task_order_id = o.id AND frontOffer.status IN (1, 3)
        LEFT JOIN s_user opu ON opu.id = frontOffer.user_id
        LEFT JOIN (select task_order_id, user_id, status, max(amount) amount from s_offer_price where pay_status = 1 and user_id = #{sUserTask.userId} group by task_order_id, user_id) lastOffer
        ON lastOffer.task_order_id = o.id AND frontOffer.status IN (1, 2, 3)
        LEFT JOIN s_user u ON u.id = lastOffer.user_id

    </select>


    <select id="queryProductCount" resultType="java.lang.Integer">
        SELECT count(DISTINCT product_id)
        FROM s_user_task_line
        WHERE user_id =#{userId}
        AND  (status = 0 or status = 1 or status = 3 or status = 4)
    </select>

    <update id="updateTaskForUnLock">
        UPDATE s_user_task
           SET pay_status = 3,
               update_time = now()
         WHERE TIMESTAMPDIFF(MINUTE, pay_time, NOW()) >= 5
           AND pay_status = 0
    </update>

    <update id="updateTaskLineFailBatch">
        UPDATE s_task_line b
             LEFT JOIN
               (SELECT task_line_id,
                       count(*) cnt
                  FROM s_user_task_line
                  where pay_status = 0
              GROUP BY task_line_id) a
              ON a.task_line_id = b.id
                   SET b.lock_task = IFNULL(a.cnt, 0)
    </update>

    <update id="updateUserTaskLineFailBatch">
        UPDATE s_user_task_line
           SET pay_status = 3,
               update_time = now()
         WHERE TIMESTAMPDIFF(MINUTE, pay_time, NOW()) >= 5
           AND pay_status = 0
    </update>

    <update id="updateTaskLineSuccessBatch" parameterType="java.lang.String">
        UPDATE s_task_line
           SET lock_task = lock_task - 1,
               received_task = received_task + 1,
               line_status = (case when received_task &gt;= total_task then 1 else 0 end),
               update_time = now()
         WHERE id = #{taskLineId}
    </update>

    <update id="updateUserTaskLineSuccessBatch" parameterType="java.lang.String">
        UPDATE s_user_task_line
           SET pay_status = 1,
               pay_time = now(),
               update_time = now()
         WHERE task_id = #{taskId}
    </update>

    <select id="queryTotalCount" resultType="java.util.Map">
        SELECT
            count(DISTINCT product_id) totalCount ,
            case
            when status = 0 or status =3 then 1
            when status = 5 or status = -1 then 2
            else 4 end  as type
        FROM
            s_user_task_line
        WHERE
            user_id = #{userId}
        AND pay_status = 1
        GROUP BY (case when status in(0,3) then 1 when status in(-1,5) then 2 else 4 end)
        UNION ALL
         SELECT  count(DISTINCT product_id) totalCount,3 as type
           FROM s_user_follow
        WHERE status = 1
          AND follow_type = 0
          AND user_id = #{userId}
    </select>
    <select id="querySettlementList" resultType="java.util.Map">
  SELECT case when a.rewardAmt>0 then '我的任务' when a.buyRewordAmt>0  then '我的任务' else '躺赢任务' end as title,
c.product_name as productName,
	d.line_order as lineOrder,
CASE when b.create_time is null then e.payment_time else b.create_time end as createTime,
a.buyRewordAmt,a.bonusAmt,a.upperHorizontaAmt,a.upperVerticalAmt,a.rewardAmt,a.totalAmt
FROM
	(
		SELECT
			 sum(case when  bonus_type=1 then bonus_amount else 0 end)  as buyRewordAmt,
        sum(case when  bonus_type=2 then bonus_amount else 0 end)  as bonusAmt,
        sum(case when  bonus_type=3 then bonus_amount else 0 end)  as upperHorizontaAmt,
        sum(case when  bonus_type=4 then bonus_amount else 0 end)  as upperVerticalAmt,
        sum(case when  bonus_type=5 then bonus_amount else 0 end)  as rewardAmt,
        sum( bonus_amount)  as totalAmt ,
			user_task_line_id,
			task_line_id,
order_detail_id
		FROM
			s_user_bonus_log
		WHERE
			user_id =#{userId}
		AND STATUS = 0
		GROUP BY
		task_line_id
	) a
LEFT JOIN s_user_task_line b ON a.user_task_line_id = b.id

LEFT JOIN s_task_line d ON a.task_line_id = d.id
LEFT JOIN s_product c ON d.product_id = c.id
LEFT JOIN s_order_detail e on a. order_detail_id=e.id
where d.id is not null
 ORDER BY title ,createTime   

       
    </select>

</mapper>
