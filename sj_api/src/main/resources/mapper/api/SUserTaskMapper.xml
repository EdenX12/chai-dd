<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.mrbird.febs.api.mapper.SUserTaskMapper">

        <!-- 通用查询映射结果 -->
        <resultMap id="BaseResultMap" type="cc.mrbird.febs.api.entity.SUserTask">
            <result column="id" property="id" />
            <result column="user_id" property="userId" />
            <result column="product_id" property="productId" />
            <result column="parent_id" property="parentId" />
            <result column="pay_status" property="payStatus" />
            <result column="pay_amount" property="payAmount" />
            <result column="pay_time" property="payTime" />
            <result column="task_number" property="taskNumber" />
            <result column="status" property="status" />
            <result column="share_flag" property="shareFlag" />
            <result column="create_time" property="createTime" />
            <result column="update_time" property="updateTime" />
        </resultMap>

        <!-- 通用查询结果列 -->
        <sql id="Base_Column_List">
                id,
            user_id, product_id, parent_id, pay_status, pay_amount, pay_time, task_number, status, share_flag, create_time, updateTime
        </sql>

        <select id="findUserTaskDetail" resultType="java.util.Map" parameterType="sUserTask">

            SELECT
                t.id taskId,
                t.user_id userId,
                t.product_id productId,
                t.task_number taskNumber,
                t.status status,
                t.create_time createTime,
                t.pay_time payTime,
                datediff(now(), t.pay_time) taskDays,
                p.product_name productName,
                p.product_img productImg,
                p.product_des productDes,
                p.product_detail productDetail,
                p.task_number totalTaskNumber,
                t2.taskNumberOK taskNumberOK,
                p.product_price productPrice,
                p.total_reward totalReward,
                p.task_price taskPrice,
                p.price_unit priceUnit,
                p.success_reward successReward,
                p.every_reward everyReward,
                ifnull(watchTask.watchCnt, 0) watchCnt,
                ifnull(gotTask.hunterCnt, 0) hunterCnt

              FROM s_user_task t
            LEFT JOIN s_product p ON p.id = t.product_id
            LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 AND status !=2 GROUP BY product_id) t2
              ON t2.product_id = t.product_id

            LEFT JOIN (select parent_id, count(*) watchCnt from s_user_task group by parent_id) watchTask
            ON watchTask.parent_id = t.id

            LEFT JOIN (select parent_id, count(*) hunterCnt from s_user_task where pay_status =1 group by parent_id) gotTask
            ON gotTask.parent_id = t.id

            WHERE t.pay_status = 1
            AND t.user_id = #{sUserTask.userId}
            AND t.status = 0

        </select>


        <select id="findUserTaskOutDetail" resultType="java.util.Map" parameterType="sUserTask">

            SELECT

            o.id taskOrderId,
            o.task_number taskNumber,
            o.create_time createTime,
            o.price_type priceType,
            o.order_price orderPrice,
            o.end_time endTime,
            o.status,

            t.id taskId,
            t.user_id userId,
            t.product_id productId,

            t.pay_time payTime,
            datediff(now(), t.pay_time) taskDays,

            p.product_name productName,
            p.product_img productImg,
            p.product_des productDes,
            p.product_detail productDetail,
            p.task_number totalTaskNumber,
            t2.taskNumberOK taskNumberOK,
            p.product_price productPrice,
            p.total_reward totalReward,
            p.task_price taskPrice,
            p.price_unit priceUnit,
            p.success_reward successReward,
            p.every_reward everyReward,

            ifnull(op.offerCount, 0) offerCount,

            frontOffer.amount amount,
            frontOffer.status frontStatus,
            opu.user_name frontUserName,
            opu.nick_name frontNickName,
            opu.user_phone frontUserPhone,

            ifnull(watchTask.watchCnt, 0) watchCnt,
            ifnull(gotTask.hunterCnt, 0) hunterCnt

            FROM s_task_order o
            LEFT JOIN s_user_task t ON t.id = o.task_id AND t.pay_status = 1
            LEFT JOIN s_product p ON p.id = t.product_id
            LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 AND status !=2 GROUP BY product_id) t2
            ON t2.product_id = t.product_id

            LEFT JOIN (SELECT task_order_id, count(*) offerCount FROM s_offer_price WHERE pay_status = 1 GROUP BY task_order_id) op
            ON op.task_order_id = o.id

            LEFT JOIN s_offer_price frontOffer ON frontOffer.task_order_id = o.id AND frontOffer.status IN (1, 3)
            LEFT JOIN s_user opu ON opu.id = frontOffer.user_id

            LEFT JOIN (select parent_id, count(*) watchCnt from s_user_task group by parent_id) watchTask
            ON watchTask.parent_id = t.id

            LEFT JOIN (select parent_id, count(*) hunterCnt from s_user_task where pay_status =1 group by parent_id) gotTask
            ON gotTask.parent_id = t.id

            WHERE 1=1
            AND o.user_id =#{sUserTask.userId} AND t.user_id = #{sUserTask.userId}

        </select>


        <select id="findUserTaskOfferDetail" resultType="java.util.Map" parameterType="sUserTask">

            SELECT
            sto.create_time createTime,

            t.id taskId,
            t.product_id productId,
            t.task_number taskNumber,

            o.id taskOrderId,
            o.end_time endTime,

            p.product_name productName,
            p.product_img productImg,
            p.product_des productDes,
            p.product_detail productDetail,
            p.task_number totalTaskNumber,
            t2.taskNumberOK taskNumberOK,
            p.product_price productPrice,
            p.total_reward totalReward,
            p.task_price taskPrice,
            p.price_unit priceUnit,
            p.success_reward successReward,
            p.every_reward everyReward,

            oc.offerCount offerCount,

            frontOffer.amount amount,
            frontOffer.status frontStatus,
            opu.user_name frontUserName,
            opu.nick_name frontNickName,
            opu.user_phone frontUserPhone,

            lastOffer.amount amount,
            lastOffer.status lastStatus,

            u.user_name lastUserName,
            u.nick_name lastNickName,
            u.user_phone lastUserPhone
            FROM
            (SELECT o.id, max(op.create_time) create_time
                FROM s_offer_price op
             INNER JOIN s_task_order o ON o.id = op.task_order_id
             WHERE op.user_id = #{sUserTask.userId}
                 AND op.pay_status = 1
            group by o.id) sto

            LEFT JOIN s_task_order o ON o.id = sto.id
            LEFT JOIN s_user_task t ON t.id = o.task_id
            LEFT JOIN s_product p ON p.id = t.product_id
            LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 GROUP BY product_id) t2
            ON t2.product_id = p.id
            LEFT JOIN (SELECT task_order_id, count(*) offerCount FROM s_offer_price WHERE pay_status = 1 GROUP BY task_order_id) oc
            ON oc.task_order_id = o.id
            LEFT JOIN s_offer_price frontOffer ON frontOffer.task_order_id = o.id AND frontOffer.status IN (1, 3)
            LEFT JOIN s_user opu ON opu.id = frontOffer.user_id
            LEFT JOIN (select task_order_id, user_id, status, max(amount) amount from s_offer_price where pay_status = 1 and user_id = #{sUserTask.userId} group by task_order_id, user_id) lastOffer
            ON lastOffer.task_order_id = o.id AND frontOffer.status IN (1, 2, 3)
            LEFT JOIN s_user u ON u.id = lastOffer.user_id

        </select>

        <select id="findUserTaskEndDetail" resultType="java.util.Map" parameterType="sUserTask">

            SELECT
                t.id taskId,
                t.user_id userId,
                t.product_id productId,
                t.task_number taskNumber,
                t.status status,
                t.create_time createTime,
                t.pay_time payTime,
                datediff(now(), t.pay_time) taskDays,
                p.product_name productName,
                p.product_img productImg,
                p.product_des productDes,
                p.product_detail productDetail,
                p.task_number totalTaskNumber,
                t2.taskNumberOK taskNumberOK,
                p.product_price productPrice,
                p.total_reward totalReward,
                p.task_price taskPrice,
                p.price_unit priceUnit,
                p.success_reward successReward,
                p.every_reward everyReward,

                ifnull(watchTask.watchCnt, 0) watchCnt,
                ifnull(gotTask.hunterCnt, 0) hunterCnt

              FROM s_user_task t
            LEFT JOIN s_product p ON p.id = t.product_id
            LEFT JOIN (SELECT product_id, SUM(task_number) taskNumberOK FROM s_user_task WHERE pay_status = 1 AND status !=2 GROUP BY product_id) t2
              ON t2.product_id = t.product_id

            LEFT JOIN (select parent_id, count(*) watchCnt from s_user_task group by parent_id) watchTask
            ON watchTask.parent_id = t.id

            LEFT JOIN (select parent_id, count(*) hunterCnt from s_user_task where pay_status =1 group by parent_id) gotTask
            ON gotTask.parent_id = t.id

            WHERE t.pay_status = 1
            AND t.user_id = #{sUserTask.userId}
            AND t.status in (3, 4)

        </select>


</mapper>
